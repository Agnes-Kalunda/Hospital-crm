# Generated by Django 5.2.1 on 2025-05-27 11:03

from django.db import migrations

def dynamic_link_users_to_doctors(apps, schema_editor):
    User = apps.get_model('authentication', 'User')
    Doctor = apps.get_model('doctors', 'Doctor')
    
    unlinked_doctor_users = User.objects.filter(
        role='DOCTOR',
        doctor__isnull=True
    )
    
    linked_count = 0
    
    for user in unlinked_doctor_users:
        if user.email:
            try:
                doctor = Doctor.objects.get(
                    email=user.email,
                    user__isnull=True
                )
                
                doctor.user = user
                doctor.save()
                linked_count += 1
                print(f"‚úÖ Linked user '{user.username}' to Dr. {doctor.first_name} {doctor.last_name}")
                
            except Doctor.DoesNotExist:
                print(f"‚ÑπÔ∏è  No unlinked doctor found with email '{user.email}' for user '{user.username}'")
            except Doctor.MultipleObjectsReturned:
                print(f"‚ö†Ô∏è  Multiple doctors found with email '{user.email}' - skipping user '{user.username}'")
    
    users_without_email = User.objects.filter(
        role='DOCTOR',
        email__isnull=True,
        doctor__isnull=True
    ) | User.objects.filter(
        role='DOCTOR', 
        email='',
        doctor__isnull=True
    )
    
    unlinked_doctors = Doctor.objects.filter(user__isnull=True)
    
    for i, user in enumerate(users_without_email):
        if i < unlinked_doctors.count():
            doctor = unlinked_doctors[i]
            doctor.user = user
            doctor.save()
            linked_count += 1
            print(f"‚úÖ Linked user '{user.username}' (no email) to Dr. {doctor.first_name} {doctor.last_name}")
    
    print(f"üìä Total links created: {linked_count}")
    
    remaining_unlinked_users = User.objects.filter(role='DOCTOR', doctor__isnull=True).count()
    remaining_unlinked_doctors = Doctor.objects.filter(user__isnull=True).count()
    
    if remaining_unlinked_users > 0:
        print(f"‚ÑπÔ∏è  {remaining_unlinked_users} doctor users remain unlinked")
    if remaining_unlinked_doctors > 0:
        print(f"‚ÑπÔ∏è  {remaining_unlinked_doctors} doctor records remain unlinked")

def reverse_dynamic_link(apps, schema_editor):
    Doctor = apps.get_model('doctors', 'Doctor')
    
    linked_doctors = Doctor.objects.filter(user__isnull=False)
    count = linked_doctors.count()
    
    linked_doctors.update(user=None)
    print(f"üîÑ Unlinked {count} doctors from users")

class Migration(migrations.Migration):

    dependencies = [
        ('doctors', '0002_doctor_user'),
        ('authentication', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(
            dynamic_link_users_to_doctors,
            reverse_dynamic_link,
        ),
    ]